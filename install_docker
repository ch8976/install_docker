#!/bin/bash

#================================================================================
# 脚本名称: install_docker.sh
# 脚本描述: 智能安装并配置 Docker 和 Docker Compose
# 作者: Your Name
# 版本: 1.0
#================================================================================

# 设置脚本在遇到错误时立即退出
set -e

# --- 颜色定义 ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- 辅助函数 ---
info() {
    echo -e "${GREEN}[信息] ${1}${NC}"
}

warn() {
    echo -e "${YELLOW}[警告] ${1}${NC}"
}

error() {
    echo -e "${RED}[错误] ${1}${NC}"
    exit 1
}

# --- 权限检查 ---
check_sudo() {
    if [ "$(id -u)" -ne 0 ]; then
        error "此脚本需要以 root 或 sudo 权限运行。请尝试使用 'sudo bash $0'。"
    fi
}

# --- 主要功能函数 ---

# 1. 检查和安装 Docker
handle_docker() {
    if command -v docker &> /dev/null; then
        info "检测到 Docker 已安装。"
        echo -n "Docker 版本: "
        docker --version
        echo "----------------------------------------"
        info "当前 Docker 镜像源配置 (/etc/docker/daemon.json):"
        if [ -f /etc/docker/daemon.json ]; then
            cat /etc/docker/daemon.json
        else
            warn "配置文件 /etc/docker/daemon.json 不存在。"
        fi
        echo "----------------------------------------"
    else
        info "未检测到 Docker，准备开始安装..."
        curl -fsSL https://gitee.com/tech-shrimp/docker_installer/releases/download/latest/linux.sh | bash -s docker --mirror Aliyun
        info "Docker 安装完成。"
    fi
}

# 2. 配置 Docker 镜像源
configure_docker_mirror() {
    info "正在配置新的 Docker 镜像源..."
    
    # 定义新的镜像源配置
    local DOCKER_DAEMON_JSON_CONTENT='{
    "registry-mirrors": [
        "https://docker.m.daocloud.io",
        "https://docker.1panel.live"
    ]
}'

    # 创建目录并写入配置
    mkdir -p /etc/docker
    echo "${DOCKER_DAEMON_JSON_CONTENT}" > /etc/docker/daemon.json

    info "配置写入成功。正在重新加载 Docker 服务..."
    systemctl daemon-reload
    systemctl restart docker

    info "Docker 服务已重启。新的镜像源配置如下:"
    echo "----------------------------------------"
    cat /etc/docker/daemon.json
    echo "----------------------------------------"
}

# 3. 安装 Docker Compose
install_docker_compose() {
    # 检查 docker-compose 是否已安装
    if command -v docker-compose &> /dev/null; then
        warn "检测到 docker-compose 已安装，跳过安装步骤。"
        echo -n "docker-compose 版本: "
        docker-compose --version
        return
    fi
    
    info "开始安装 Docker Compose..."

    # 自动检测架构
    ARCH=$(uname -m)
    case ${ARCH} in
        x86_64|amd64)
            TARGET_ARCH="x86_64"
            ;;
        aarch64|arm64)
            TARGET_ARCH="aarch64"
            ;;
        *)
            error "不支持的系统架构: ${ARCH}"
            ;;
    esac
    info "检测到系统架构: ${TARGET_ARCH}"

    # 从 GitHub API 获取最新版本号
    info "正在获取最新的 Docker Compose 版本号..."
    LATEST_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    if [ -z "$LATEST_VERSION" ]; then
        error "获取最新版本号失败，请检查网络或 GitHub API 状态。"
    fi
    info "最新的 Docker Compose 版本是: ${LATEST_VERSION}"

    # 构建下载 URL
    DOWNLOAD_URL="https://github.com/docker/compose/releases/download/${LATEST_VERSION}/docker-compose-linux-${TARGET_ARCH}"
    ACCELERATED_URL="https://xget.xi-xu.me/gh/docker/compose/releases/download/${LATEST_VERSION}/docker-compose-linux-${TARGET_ARCH}"
    DEST_PATH="/usr/local/bin/docker-compose"
    DOWNLOAD_TEMP_FILE="/tmp/docker-compose-linux-${TARGET_ARCH}"

    info "准备从以下加速地址下载:"
    echo "${ACCELERATED_URL}"

    # 检测多线程下载器
    DOWNLOAD_CMD=""
    if command -v aria2c &> /dev/null; then
        read -p "$(echo -e ${YELLOW}"[询问] 检测到多线程下载器 'aria2c'，是否使用它加速下载? (y/n): "${NC})" use_aria
        if [[ "${use_aria}" =~ ^[Yy]$ ]]; then
            DOWNLOAD_CMD="aria2c -x 16 -s 16 -k 1M -o ${DOWNLOAD_TEMP_FILE} ${ACCELERATED_URL}"
        fi
    elif command -v axel &> /dev/null; then
        read -p "$(echo -e ${YELLOW}"[询问] 检测到多线程下载器 'axel'，是否使用它加速下载? (y/n): "${NC})" use_axel
        if [[ "${use_axel}" =~ ^[Yy]$ ]]; then
            DOWNLOAD_CMD="axel -n 16 -o ${DOWNLOAD_TEMP_FILE} ${ACCELERATED_URL}"
        fi
    fi

    # 如果用户选择不使用或没有多线程工具，则使用 curl
    if [ -z "${DOWNLOAD_CMD}" ]; then
        info "使用 curl 进行下载..."
        DOWNLOAD_CMD="curl -L -o ${DOWNLOAD_TEMP_FILE} ${ACCELERATED_URL}"
    else
        info "使用多线程下载器进行下载..."
    fi

    # 执行下载
    ${DOWNLOAD_CMD}

    info "下载完成。正在安装..."
    # 移动文件并添加权限
    mv "${DOWNLOAD_TEMP_FILE}" "${DEST_PATH}"
    chmod +x "${DEST_PATH}"

    # 验证安装
    info "Docker Compose 安装成功！"
    echo -n "版本信息: "
    docker-compose --version
}

# --- 主逻辑 ---
main() {
    check_sudo
    
    handle_docker
    configure_docker_mirror

    read -p "$(echo -e ${YELLOW}"\n[询问] 是否需要下载并安装 Docker Compose? (y/n): "${NC})" choice
    case "$choice" in
        [yY] | [yY][eE][sS])
            install_docker_compose
            ;;
        *)
            info "跳过安装 Docker Compose。"
            ;;
    esac

    info "\n所有操作已完成！"
}

# --- 脚本入口 ---
main
